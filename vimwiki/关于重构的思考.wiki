重构的七个阶段：
1.第一阶段-绝望
    在你开始去查看你想要重构的模块时，你会觉得好像很简单，这里需要改一个类，那里需要改两到三个函数，重写几个函数，看上去没什么大不了的，一两天就搞定了。于是你着手开始重构，比如改了一些命名，修理了一些逻辑，渐渐地，你会发现这个怪物原来体形这么大，你会看到与代码不合甚至含糊不清的注释，完全摸不着头脑的数据结构，你还会发现无法搞清一个函数调用链上的逻辑。你感到这个事可能一周搞不定，你开始绝望了。
2.第二阶段-找最简单的做
    你承认你要重构的这个模块就是一个可怕的怪物，不是一两下就能搞定的，于是你开始着手一些简单的事，比如重新命名几个函数，移除一些代码的障碍，等等，你知道这样做至少不会让代码变得更糟。
3.第三阶段-再次绝望
    但是接下来的事会让你再次撞墙。你会发现那些代码的瑕疵是不痛不痒的事，改正这些完全于事无补。你应该做的事就是重写所有的东西，但是你没有时间这么干，而这些代码剪不断理还乱，耦合得太多，让你再一次绝望。所以，你只能部分重写那些不会花太多时间的部分，这样至少可以让那些老的代码能被更多的重用。虽然不完美，但是至少可以试一下。
4.第四阶段-开始乐观
    在你试着部分重构这个模块几天之后，随着重构几个单元后，虽然你发现发送代码的速度实在是太慢了，但此时，你已知道应该要改成什么样，你在痛苦之后也锁定了那修改的类。虽然你的时间预算已经超支，虽然要干的事比较多，但你还是充满希望，觉得那是值得的，你胸中的那团火又被点燃了。
5.第五阶段-快速了结
    在这个时候，你发现你已花了太多的时间，而情况越来越复杂，你所面对的情况让你越来越不安，你明白你已陷入了困境。你原来以为只需要一次简单的重构，然而现在你要面对的是重写几乎所有的代码。你开始意识到你是一个完美主义者，你想让代码变得完美。你开始怠慢你设想的文档，并想找到一个捷径来重写老的代码，你开始使用一些简单而粗暴，快速而有点肮脏的方法，虽然不是很完美，但你就是这样去做了。然后，你开始进行UT，发现全是红色，你恐慌了，于是快速地fix代码，然后让UI通过。
6.第六阶段-修改大量的BUG
    你的重写并不完美，虽然经过了测试，但是那些UT测试对于你的新的代码有点不太合适，虽然他们都没有报错，但是他们的测试范围太小了，没有覆盖到所有的情况和边界。所以，在这以后，你还需要几周或是更长的时间不得不来修正越来越多的BUG，这使得你的设计和代码在每一次quick-fix后变得越来越难看。此时，代码已经不像你所期望的那样完美了，但你依然觉得它比一开始要好一些。这个阶段可能历经几个月。
7.第七阶段-觉悟
    经过了几个月，你重写的模块又出了一个比较严重的BUG。这让你重构的那个模块变得更难堪。你发现出的这个问题是和当初的设计不一致，你还发现被你重构的那段老的代码并不像当初看上去的那么坏，那段老的代码考虑到了一些你未曾考虑到的事情。这个时候，你团队里有人站出来说这个模块应该被重构或是重写，而你却不动声色一言不发，并希望那个站出来的人能在几个月后觉悟起来。
