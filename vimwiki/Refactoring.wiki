Q1: Refactoring与Testing的关系?
A:  Refactoring本来与Testing没有直接的联系，而是与软件熵有关，但既然我们说测试能解决软件熵问题，我们也就必须说出解决之道。软件熵引出的一个问题: 是否需要重新设计整个软件的结构? 理论上应该如此，但现实很骨感。不管是时间问题还是经费问题，重新设计整个软件的结构会给我们带来短期的痛苦，而不停地给软件打补丁甚至是补丁的补丁则会给我们带来长期的痛苦。(不管怎样，我们总是处于水深火热中)。Refactoring是一个术语，用于描述一种技术，利用这种技术我们可以避免重构整个软件所带来的短期痛苦。

Q2: Refactoring是怎样实施的?
A:  当你refactor时，你并不改变程序的功能，而是改变程序内部的结构，使其更易理解和使用。

Q3: Refactoring的几个规则?
A:  1. 不要在加入新功能的时候同时Refactor已有的代码。在这两者要有一个清晰的界限。如每天早上1-2小时的Refactoring，其余时间添加新的功能。
    2. 在你开始Refactoring之前和Refactoring之后，都要保证测试全部顺利通过，否则Refactoring没有任何意义。
    3. 只进行小的Refactoring，大的就不是Refactoring。如果你打算重构整个软件，就没有必要Refactoring了。
    4. 只有在添加新功能和调试BUG时才有必要Refactoring。不要等到交付软件的最后关头才Refactoring，那样和打补丁的区别不大。

Q4: Refactoring与打补丁?
A:  Refactoring在回归测试中也能显示其威力。我不反对打补丁，但要记往打补丁应该是最后使用的必杀技。而且打补丁也需要很高的技术技巧。
