
字符编码笔记

字符编码是计算机技术的基石，一个优秀的程序员应该对各种常用的字符集有一定的认识。

1.ASCII码

在计算机内部，所有的信息最终都表示为一个二进制字符串，所以一个字节就可以表示256种状态，我们可以使用这256种状态来表示256个字符，从00000000到11111111.

上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系做了统一规定，这便是ASCII码。

ASCII码一共规定了128个字符。比如空格“SPACE"是32（00100000），大写的字母A是65（01000001），小写的字母a是97（01100001），数字1是48（00110000），另外还有32个不能打印的控制符号。这128个字符只占用了一个字节的前7位，最前面的1位统一规定为0.


2.非ASCII码

英语的字符少，所以128个字符编码便已足够使用，但对于很多其他语言来说，128个符号是远远不够的，所以一些欧洲国家便决定利用字节中的最高位编入新的符号，这样，可以最多表示256个符号。

但是不同国家的不同语言中又有着不同的字母符号，这样就造成了所有这些编码方式中，0-127表示的符号是一样的，而128-255表示的一段是不一样的。

第二个问题是，对于亚洲很多国家来说，即使是256个字符也是远远不够的，汉字便有多达10万个左右，因此必须使用多个字节来表达一个符号。比如，简体中文常见的编码方式是GB2312，使用两个字节来表示一个汉字，所以理论上最多可以表示65536个符号。

3.Unicode

世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因为，若要打开一个文本文件，便必须知道它的编码方式，否则用错误的编码方式去解读，便会出现乱码。（比如电子邮件）

试想，若有一种编码方式，将世界上所有的符号都纳入其中，每一个符号都有一个独一无二的编码，那么便再无乱码问题。这便是Unicode。由其名可知，这是一种所有符号的编码。

Unicode是一个很大的集合，现在的规模可以容纳100多万个符号。比如，U+0639表示阿拉伯字母Ain， U+0041表示英语的大写字母A，U+4E25表示汉字“严”。具体的符号对应表，可以查询unicode.org。


4.Unicode的问题

Unicode只是一个字符集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。

比如汉字“严”的Unicode码是U+4E25，转换成二进制为（100111000101001），至少两个字节来存储这个字符。当然就存在其它字符需要3个字节或跟多字节来存储。

这样就带来了两个严重的问题：
a。如何区别Unicode跟ASCII呢？计算机怎么才能知道这3个字节表示1个字符，而不是分别表示3个字符呢？
b。一个英文字符在ASCII中只需要1个字节的空间，如果Unicode统一规定，每个符号用3到4个字节表示，这对于存储来说是一个极大的浪费。

这两个问题造成的两个结果：
a。出现了Unicode的多种存储方式，也就是说有多种不同的二进制格式可以用来表示Unicode。
b。Unicode在很长一段时间内无法推广，知道互联网的出现。


5.UTF-8

互联网的出现，强烈要求一种统一的编码方式。UTF-8就是在互联网上使用最广的一种unicode的实现方式。其他实现方式还包括UTF-16和UTF-32，不过在互联网上基本不用。NOTICE：UTF-8是Unicode的实现方式之一。

UTF-8是一种变长的编码方式。它可以使用1-4个字节表示一个符号，根据不同的符号使用不同的字节长度。

UTF-8的编码规则有两条，如下：

Unicode符号范围      |      UTF-8编码方式
（十六进制）               （二进制）
0000 0000-0000 007F  |     0XXXXXXX
0000 0080-0000 07FF  |     110XXXXX 10XXXXXX
0000 0800-0000 FFFF  |     1110XXXX 10XXXXXX 10XXXXXX
0001 0000-0010 FFFF  |     11110XXX 10XXXXXX 10XXXXXX 10XXXXXX

a.对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。对于英文字母，UTF-8编码和ASCII码是一样的。
b.对于n字节的符号（n>1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位都设为10，剩下没有提及的二进制位，全部为这个符号的unicode码。

以汉字“严”为例，“严”的unicode码是4E25（100111000100101），根据上表，处在第三行的范围，所以“严”的UTF-8编码需要3个字节，从“严”的最后一位二进制开始，依次从后向前填入，多出的位补0. 由此可以得到”严“的UTF-8编码是”11100100 10111000 10100101", 十六进制为E4B8A5.


6. UTF-8与Unicode的转化——实验

Windows平台下的Notepad记事本可以保存的编码类型有四种：ANSI，Unicode，Unicode big endian，UTF-8.

Unicode编码指的是UCS-2编码方式，即直接用两个字节存入字符的Unicode码，使用的是little endian格式。

ANSI是默认的编码方式，对于英文文件是ASCII编码，对于简体中文是GB2312编码。

<!--
关于little endian 与 big endian

这两个古怪的名称来自英国作家斯威夫特的《格列佛游记》。在该书中，小人国里爆发了内战，战争起因是人们争论，吃鸡蛋时究竟是从大头(Big-Endian)敲开还是从小头(Little-Endian)敲开。为了这件事情，前后爆发了六次战争，一个皇帝送了命，另一个皇帝丢了王位。

Unicode码可以采用UCS-2格式直接存储，以汉字“严”为例，Unicode码是4E25，需要两个字节存储，如果存储的时候4E在前，25在后，就是big endian，如果25在前，4E在后，就是little endian.

所以第一个字节在前，就是big endian，否则就是little endian.

现在就有一个问题，计算机如何知道一个文件是little endian 还是 big endian？
Unicode规范中规定，每一个文件的最前面都要加入一个表示编码顺序的字符，这个字符叫做“零宽度非换行空格”（ZERO WIDTH NO-BREAK SPACE），用FEFF表示该文件采用大头方式，用FFFE表示该文件采用小头方式。

-->

使用记事本，新建一个文本文件，内容为一个“严”字，依次用以上四种方式保存。使用工具软件查看文件的十六进编码：
a。ANSI：文件的编码就是两个字节“D1 CF”，这正是“严”的GB2312编码，也说明GB2312使用的是大头方式存储。
b。Unicode：编码是四个字节FF FE 25 4E， 其中FF FE表示是小头方式存储。
c。Unicode big endian：编码是四个字节FE FF 4E 25，大头方式存储。
d。UTF-8：编码是六个字节EF BB BF E4 B8 A5，前三个字节EF BB BF表示这是UTF-8编码，后三个是“严"的具体编码，大头存储方式。


7.关于GBK，GB2312中文编码
